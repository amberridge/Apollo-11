      - name: Fetch GitHub Traffic Data
        id: fetch-data
        run: |
          # Set variables
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          
          echo "Repository Owner: ${REPO_OWNER}"
          echo "Repository Name: ${REPO_NAME}"
          
          BASE_URL="https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/traffic"
          echo "Base URL: ${BASE_URL}"
          
          # Fetch traffic data using PAT with admin permissions
          echo "Fetching views..."
          VIEWS=$(curl -s -L \
                       -H "Authorization: Bearer ${{ secrets.TRAFFIC_PAT }}" \
                       -H "Accept: application/vnd.github+json" \
                       -H "X-GitHub-Api-Version: 2022-11-28" \
                       "${BASE_URL}/views")
          
          echo "Fetching clones..."
          CLONES=$(curl -s -L \
                        -H "Authorization: Bearer ${{ secrets.TRAFFIC_PAT }}" \
                        -H "Accept: application/vnd.github+json" \
                        -H "X-GitHub-Api-Version: 2022-11-28" \
                        "${BASE_URL}/clones")
          
          echo "Fetching referrers..."
          REFERRERS=$(curl -s -L \
                           -H "Authorization: Bearer ${{ secrets.TRAFFIC_PAT }}" \
                           -H "Accept: application/vnd.github+json" \
                           -H "X-GitHub-Api-Version: 2022-11-28" \
                           "${BASE_URL}/popular/referrers")
          
          echo "Fetching paths..."
          PATHS=$(curl -s -L \
                       -H "Authorization: Bearer ${{ secrets.TRAFFIC_PAT }}" \
                       -H "Accept: application/vnd.github+json" \
                       -H "X-GitHub-Api-Version: 2022-11-28" \
                       "${BASE_URL}/popular/paths")
          
          # Check for errors
          if echo "$VIEWS" | grep -q '"message"'; then
            echo "Error fetching views:"
            echo "$VIEWS"
            exit 1
          fi
          
          # Debug: Show response snippets
          echo "Views response (first 200 chars): ${VIEWS:0:200}"
          echo "Clones response (first 200 chars): ${CLONES:0:200}"
          
          # Extract metrics
          VIEWS_COUNT=$(echo "$VIEWS" | jq -r '.count // 0')
          VIEWS_UNIQUES=$(echo "$VIEWS" | jq -r '.uniques // 0')
          CLONES_COUNT=$(echo "$CLONES" | jq -r '.count // 0')
          CLONES_UNIQUES=$(echo "$CLONES" | jq -r '.uniques // 0')
          
          echo "Extracted counts - Views: ${VIEWS_COUNT}, Clones: ${CLONES_COUNT}"
          
          # Save to outputs
          echo "views_count=${VIEWS_COUNT}" >> $GITHUB_OUTPUT
          echo "views_uniques=${VIEWS_UNIQUES}" >> $GITHUB_OUTPUT
          echo "clones_count=${CLONES_COUNT}" >> $GITHUB_OUTPUT
          echo "clones_uniques=${CLONES_UNIQUES}" >> $GITHUB_OUTPUT
          
          # Save full JSON to files
          echo "$VIEWS" > /tmp/views.json
          echo "$CLONES" > /tmp/clones.json
          echo "$REFERRERS" > /tmp/referrers.json
          echo "$PATHS" > /tmp/paths.json
          
          # Display summary
          echo "ðŸ“Š Traffic Summary:"
          echo "Views: ${VIEWS_COUNT} (${VIEWS_UNIQUES} unique)"
          echo "Clones: ${CLONES_COUNT} (${CLONES_UNIQUES} unique)"
